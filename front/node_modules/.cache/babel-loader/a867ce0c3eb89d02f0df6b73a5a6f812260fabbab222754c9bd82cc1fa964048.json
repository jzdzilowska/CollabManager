{"ast":null,"code":"var _jsxFileName = \"/Users/zdzilowska/Desktop/university/year 2/cs0320/term-project-rdbrooks-meball-jzdzilow-sridley/front/src/components/LoginPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/LoginPage.css\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport { mockedMode, userSessionState } from \"../recoil/atoms\";\nimport { UserRole } from \"../recoil/atoms\";\n// Used the following video for firebase authentication: https://www.youtube.com/watch?v=vDT7EnUpEoo\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\n// Import functions needed from appropriate SDKs\nimport { initializeApp } from \"firebase/app\";\nimport { firebaseConfig } from \"../private/FirebaseAPI\";\n\n// using login email, determine if instructor by calling backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRoleFromBackend(email) {\n  return fetch(\"http://localhost:3333/isInstructor?email=\" + email).then(response => response.json()).then(data => {\n    return data[\"message\"]; // either student or instructor\n  }).catch(error => {\n    console.log(\"Error encountered when fetching role from backend: \" + error);\n  });\n}\n\n// checks if session started by determining if backend call to get info successful\nexport function checkSessionStarted() {\n  return fetch(\"http://localhost:3333/getInfo\").then(response => response.json()).then(data => {\n    if (data[\"result\"] === \"success\") {\n      return true;\n    } else {\n      // error with getting info means session not successful started\n      return false;\n    }\n  }).catch(error => {\n    alert(\"ERROR \" + error);\n    return false;\n  });\n}\nconst LoginPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const setUserSession = useSetRecoilState(userSessionState);\n  const [isMockedMode, setMockedMode] = useRecoilState(mockedMode);\n\n  // MOCKED LOGIN - uses mocked data to determine user role and navigate to appropriate page\n  const handleLoginMocked = async () => {\n    const response = await fetch(\"http://localhost:2000/login/\");\n    const data = await response.json();\n    const users = data.users;\n    const user = users.find(u => u.email === email);\n    if (user) {\n      if (user.role === \"student\") {\n        setUserSession({\n          user: user,\n          role: UserRole.NoneSelected,\n          time: null\n        });\n        return navigate(\"/role-selection\");\n      } else if (user.role === \"instructor\") {\n        setUserSession({\n          user: user,\n          role: UserRole.Instructor,\n          time: null\n        });\n        return navigate(\"/dashboard\");\n      }\n    } else {\n      return navigate(\"/failed-login\");\n    }\n  };\n  const handleMockedMode = ifMocked => {\n    setMockedMode(ifMocked);\n  };\n\n  // initialize Firebase login and redirect to appropriate page\n  const app = initializeApp(firebaseConfig);\n  const auth = getAuth(app);\n  const provider = new GoogleAuthProvider();\n  const signInWithGoogle = async () => {\n    try {\n      // connects to google auth\n      const result = await signInWithPopup(auth, provider);\n\n      // retrieves email and name stored by google auth\n      const name = result.user.displayName;\n      const email = result.user.email;\n      if (name == null || email == null) {\n        return navigate(\"/failed-login\");\n      } else {\n        // create IUser from email and name (role will be set later)\n        let user = {\n          email: email,\n          name: name,\n          role: \"\"\n        };\n\n        // // defensive programming\n        // if (!user?.email.includes(\"brown.edu\")) {\n        //   return navigate(\"/failed-login\");\n        // }\n\n        try {\n          const roleFromBackend = await getRoleFromBackend(user.email);\n          user.role = roleFromBackend;\n        } catch (error) {\n          console.error(\"Error fetching role from backend:\", error);\n          // Determine what to do with the error, handle it as needed\n          return navigate(\"/failed-login\");\n        }\n        if (user.role === \"student\") {\n          // if a session has not been started, then create pop up\n          checkSessionStarted().then(isSessionStarted => {\n            if (!isSessionStarted) {\n              return alert(\"No session has been started by an instructor.\");\n            } else {\n              // setting user session provides info for rest of frontend to use\n              setUserSession({\n                user: user,\n                role: UserRole.NoneSelected,\n                // students still have to select role\n                time: null\n              });\n              return navigate(\"/role-selection\");\n            }\n          }).catch(error => {\n            console.log(\"Error encountered: \" + error);\n          });\n        } else if (user.role === \"instructor\") {\n          checkSessionStarted().then(isSessionStarted => {\n            // if session already started and instructor alert that cannot join\n            if (isSessionStarted) {\n              return alert(\"Only one session can be held at a time and an instructor has already started a session.\");\n            } else {\n              // setting user session provides info for rest of frontend to use\n              setUserSession({\n                user: user,\n                role: UserRole.Instructor,\n                time: null\n              });\n              return navigate(\"/dashboard\");\n            }\n          }).catch(error => {\n            console.log(\"Error encountered: \" + error);\n          });\n        }\n      }\n    } catch (error) {\n      console.log(\"Error encountered during user authentication: \" + error);\n    }\n  };\n\n  // two different displays depending on if mocked mode\n  if (!isMockedMode) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome to Collab Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: signInWithGoogle,\n          className: \"btn\",\n          children: \"Sign In With Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMockedMode(true),\n        className: \"mocked-button\",\n        children: \"Mocked Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome to Collab Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-box\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"username\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-box\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLoginMocked,\n          className: \"btn\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMockedMode(false),\n        className: \"mocked-button\",\n        children: \"Regular Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(LoginPage, \"T00FbmvPfyLOAaHHhfr3r2yBIY0=\", false, function () {\n  return [useNavigate, useSetRecoilState, useRecoilState];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","useRecoilState","useSetRecoilState","mockedMode","userSessionState","UserRole","getAuth","GoogleAuthProvider","signInWithPopup","initializeApp","firebaseConfig","jsxDEV","_jsxDEV","getRoleFromBackend","email","fetch","then","response","json","data","catch","error","console","log","checkSessionStarted","alert","LoginPage","_s","navigate","setEmail","password","setPassword","setUserSession","isMockedMode","setMockedMode","handleLoginMocked","users","user","find","u","role","NoneSelected","time","Instructor","handleMockedMode","ifMocked","app","auth","provider","signInWithGoogle","result","name","displayName","roleFromBackend","isSessionStarted","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/zdzilowska/Desktop/university/year 2/cs0320/term-project-rdbrooks-meball-jzdzilow-sridley/front/src/components/LoginPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/LoginPage.css\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport { mockedMode, userSessionState } from \"../recoil/atoms\";\nimport { UserRole } from \"../recoil/atoms\";\nimport { IUser } from \"../types/IUser\";\n\n// Used the following video for firebase authentication: https://www.youtube.com/watch?v=vDT7EnUpEoo\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\n// Import functions needed from appropriate SDKs\nimport { initializeApp } from \"firebase/app\";\nimport { firebaseConfig } from \"../private/FirebaseAPI\";\n\n// using login email, determine if instructor by calling backend\nfunction getRoleFromBackend(email: string): Promise<string> {\n  return fetch(\"http://localhost:3333/isInstructor?email=\" + email)\n    .then((response) => response.json())\n    .then((data) => {\n      return data[\"message\"]; // either student or instructor\n    })\n    .catch((error) => {\n      console.log(\n        \"Error encountered when fetching role from backend: \" + error\n      );\n    });\n}\n\n// checks if session started by determining if backend call to get info successful\nexport function checkSessionStarted(): Promise<boolean> {\n  return fetch(\"http://localhost:3333/getInfo\")\n    .then((response) => response.json())\n    .then((data) => {\n      if (data[\"result\"] === \"success\") {\n        return true;\n      } else {\n        // error with getting info means session not successful started\n        return false;\n      }\n    })\n    .catch((error) => {\n      alert(\"ERROR \" + error);\n      return false;\n    });\n}\n\nconst LoginPage = () => {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const setUserSession = useSetRecoilState(userSessionState);\n  const [isMockedMode, setMockedMode] = useRecoilState(mockedMode);\n\n  // MOCKED LOGIN - uses mocked data to determine user role and navigate to appropriate page\n  const handleLoginMocked = async () => {\n    const response = await fetch(\"http://localhost:2000/login/\");\n    const data = await response.json();\n    const users: IUser[] = data.users;\n\n    const user = users.find((u) => u.email === email);\n    if (user) {\n      if (user.role === \"student\") {\n        setUserSession({ user: user, role: UserRole.NoneSelected, time: null });\n        return navigate(\"/role-selection\");\n      } else if (user.role === \"instructor\") {\n        setUserSession({ user: user, role: UserRole.Instructor, time: null });\n        return navigate(\"/dashboard\");\n      }\n    } else {\n      return navigate(\"/failed-login\");\n    }\n  };\n\n  const handleMockedMode = (ifMocked: boolean) => {\n    setMockedMode(ifMocked);\n  };\n\n  // initialize Firebase login and redirect to appropriate page\n  const app = initializeApp(firebaseConfig);\n  const auth = getAuth(app);\n  const provider = new GoogleAuthProvider();\n\n  const signInWithGoogle = async () => {\n    try {\n      // connects to google auth\n      const result = await signInWithPopup(auth, provider);\n\n      // retrieves email and name stored by google auth\n      const name: string | null = result.user.displayName;\n      const email: string | null = result.user.email;\n\n      if (name == null || email == null) {\n        return navigate(\"/failed-login\");\n      } else {\n        // create IUser from email and name (role will be set later)\n        let user: IUser = {\n          email: email,\n          name: name,\n          role: \"\",\n        };\n\n        // // defensive programming\n        // if (!user?.email.includes(\"brown.edu\")) {\n        //   return navigate(\"/failed-login\");\n        // }\n\n        try {\n          const roleFromBackend = await getRoleFromBackend(user.email);\n          user.role = roleFromBackend;\n        } catch (error) {\n          console.error(\"Error fetching role from backend:\", error);\n          // Determine what to do with the error, handle it as needed\n          return navigate(\"/failed-login\");\n        }\n        if (user.role === \"student\") {\n          // if a session has not been started, then create pop up\n          checkSessionStarted()\n            .then((isSessionStarted) => {\n              if (!isSessionStarted) {\n                return alert(\"No session has been started by an instructor.\");\n              } else {\n                // setting user session provides info for rest of frontend to use\n                setUserSession({\n                  user: user,\n                  role: UserRole.NoneSelected, // students still have to select role\n                  time: null,\n                });\n                return navigate(\"/role-selection\");\n              }\n            })\n            .catch((error) => {\n              console.log(\"Error encountered: \" + error);\n            });\n        } else if (user.role === \"instructor\") {\n          checkSessionStarted()\n            .then((isSessionStarted) => {\n              // if session already started and instructor alert that cannot join\n              if (isSessionStarted) {\n                return alert(\n                  \"Only one session can be held at a time and an instructor has already started a session.\"\n                );\n              } else {\n                // setting user session provides info for rest of frontend to use\n                setUserSession({\n                  user: user,\n                  role: UserRole.Instructor,\n                  time: null,\n                });\n                return navigate(\"/dashboard\");\n              }\n            })\n            .catch((error) => {\n              console.log(\"Error encountered: \" + error);\n            });\n        }\n      }\n    } catch (error) {\n      console.log(\"Error encountered during user authentication: \" + error);\n    }\n  };\n\n  // two different displays depending on if mocked mode\n  if (!isMockedMode) {\n    return (\n      <div className=\"login-body\">\n        <div className=\"login-container\">\n          <h1>Welcome to Collab Section</h1>\n          <button onClick={signInWithGoogle} className=\"btn\">\n            Sign In With Google\n          </button>\n        </div>\n        <button\n          onClick={() => handleMockedMode(true)}\n          className=\"mocked-button\"\n        >\n          Mocked Mode\n        </button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"login-body\">\n        <div className=\"login-container\">\n          <h1>Welcome to Collab Section</h1>\n          <div className=\"input-box\">\n            <input\n              type=\"email\"\n              placeholder=\"username\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div className=\"input-box\">\n            <input\n              type=\"password\"\n              placeholder=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          <button onClick={handleLoginMocked} className=\"btn\">\n            Login\n          </button>\n        </div>\n        <button\n          onClick={() => handleMockedMode(false)}\n          className=\"mocked-button\"\n        >\n          Regular Mode\n        </button>\n      </div>\n    );\n  }\n};\n\nexport default LoginPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}